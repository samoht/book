#use "topfind";;
#thread;;
#require "core";;
#require "ppx_jane";;
open Base;;
[@@@part "1"];;
type 'a compact_array =
  | Array of 'a array
  | Bytes of bytes
;;

[%%expect ocaml {|type 'a compact_array = Array of 'a array | Bytes of bytes|}];;
[@@@part "1.1"];;
let of_bytes x = Bytes x
let of_array x = Array x

let length = function
  | Array a -> Array.length a
  | Bytes b -> Bytes.length b

let get t i =
  match t with
  | Array a -> a.(i)
  | Bytes b -> Bytes.get b i

let set t i v =
  match t with
  | Array a -> a.(i) <- v
  | Bytes b -> Bytes.set b i v

[%%expect ocaml {| |}]
[@@@part "2"];;
[%%expect{|
Characters 306-312:
Error: Uninterpreted extension 'expect'.
|}];;
type 'a gadt_compact_array =
  | Array : 'a array -> 'a gadt_compact_array
  | Bytes : bytes -> 'a gadt_compact_array
;;

[%%expect ocaml {|
type 'a gadt_compact_array =
    Array : 'a array -> 'a gadt_compact_array
  | Bytes : bytes -> 'a gadt_compact_array
|}];;
[@@@part "2.1"];;
Array [|1;2;3|];;
[%%expect ocaml {|- : int gadt_compact_array = Array [|1; 2; 3|]|}];;
Array [|1.0;2.0;3.0|];;
[%%expect ocaml {|- : float gadt_compact_array = Array [|1.; 2.; 3.|]|}];;

[@@@part "2.2"];;
Bytes (Bytes.of_string "foo");;

[%%expect ocaml {|- : '_weak1 gadt_compact_array = Bytes (Bytes.of_string "foo")|}];;
[@@@part "3"];;
type 'a t = | Array : 'a array -> 'a t
            | Bytes : bytes -> char t
;;

[%%expect ocaml {|type 'a t = Array : 'a array -> 'a t | Bytes : bytes -> char t|}];;
[@@@part "3.1"];;
let length t =
  match t with
  | Bytes b -> Bytes.length b
  | Array a -> Array.length a
;;

[%%expect ocaml {|val length : char t -> int = <fun>|}];;
[@@@part "3.2"];;
let length (type el) (t:el t) =
  match t with
  | Bytes b -> Bytes.length b
  | Array a -> Array.length a
;;

[%%expect ocaml {|val length : 'a t -> int = <fun>|}];;
[@@@part "3.3"];;
module Compact_array = struct

  type 'a t = | Array : 'a array -> 'a t
              | Bytes : bytes -> char t

  let of_bytes x = Bytes x
  let of_array x = Array x

  let length (type el) (t:el t) =
    match t with
    | Array a -> Array.length a
    | Bytes s -> Bytes.length s

  let get (type el) (t:el t) i : el =
    match t with
    | Array a -> Array.get a i
    | Bytes s -> Bytes.get s i

  let set (type el) (t:el t) i (v:el) =
    match t with
    | Array a -> Array.set a i v
    | Bytes s -> Bytes.set s i v

end;;

[%%expect ocaml {|
module Compact_array :
  sig
    type 'a t = Array : 'a array -> 'a t | Bytes : bytes -> char t
    val of_bytes : bytes -> char t
    val of_array : 'a array -> 'a t
    val length : 'a t -> int
    val get : 'a t -> int -> 'a
    val set : 'a t -> int -> 'a -> unit
  end
|}];;
[@@@part "10"];;
type value =
  | Int of int
  | Bool of bool

type expr =
  | Value of value
  | If    of expr * expr * expr
  | Gt    of expr * expr
  | Plus  of expr * expr
;;

[%%expect ocaml {|
type value = Int of int | Bool of bool
type expr =
    Value of value
  | If of expr * expr * expr
  | Gt of expr * expr
  | Plus of expr * expr
|}];;
[@@@part "11"];;
let max_expr x y =
  let i x = Value (Int x) in
  let x = i x in
  let y = i y in
  If (Gt (x,y), x, y)
;;
[%%expect ocaml {|val max_expr : int -> int -> expr = <fun>|}];;
max_expr 3 4;;

[%%expect ocaml {|
- : expr =
If (Gt (Value (Int 3), Value (Int 4)), Value (Int 3), Value (Int 4))
|}];;
[@@@part "12"];;
let ill_typed x y =
  let i x = Value (Int x) in
  let x = i x in
  let y = i y in
  Plus (Gt (x,y), y)
;;
[%%expect ocaml {|val ill_typed : int -> int -> expr = <fun>|}];;
ill_typed 3 4;;

[%%expect ocaml {|- : expr = Plus (Gt (Value (Int 3), Value (Int 4)), Value (Int 4))|}];;
[@@@part "13"];;
let rec eval expr =
  let eval_int expr =
    match eval expr with
    | Int x -> x
    | Bool _ -> failwith "expected int, found bool"
  in
  let eval_bool expr =
    match eval expr with
    | Bool x -> x
    | Int _ -> failwith "expected bool, found int"
  in
  match expr with
  | Value v    -> v
  | If (c,t,e) -> if eval_bool c then eval t else eval e
  | Gt (x,y)   -> Bool (eval_int x > eval_int y)
  | Plus (x,y) -> Int (eval_int x + eval_int y)
;;

[%%expect ocaml {|val eval : expr -> value = <fun>|}];;
[@@@part "14"];;
eval (max_expr  3 4);;
[%%expect ocaml {|- : value = Int 4|}];;
eval (ill_typed 3 4);;

[%%expect{|Exception: Failure "expected int, found bool".|}];;
[@@@part "15"];;
type _ value =
  | Int  : int  -> int value
  | Bool : bool -> bool value
;;
[%%expect ocaml {|type _ value = Int : int -> int value | Bool : bool -> bool value|}];;
type _ expr =
  | Value : 'a value                      -> 'a expr
  | If    : bool expr * 'a expr * 'a expr -> 'a expr
  | Gt    : 'a expr * 'a expr             -> bool expr
  | Plus  : int expr * int expr           -> int expr
;;
[%%expect ocaml {|
type _ expr =
    Value : 'a value -> 'a expr
  | If : bool expr * 'a expr * 'a expr -> 'a expr
  | Gt : 'a expr * 'a expr -> bool expr
  | Plus : int expr * int expr -> int expr
|}];;
[@@@part "16"];;
let max_expr x y =
  let i x = Value (Int x) in
  let x = i x in
  let y = i y in
  If (Gt (x,y), x, y)
;;
[%%expect ocaml {|val max_expr : int -> int -> int expr = <fun>|}];;
max_expr 3 4;;

[%%expect ocaml {|
- : int expr =
If (Gt (Value (Int 3), Value (Int 4)), Value (Int 3), Value (Int 4))
|}];;
[@@@part "17"];;
let ill_typed x y =
  let i x = Value (Int x) in
  let x = i x in
  let y = i y in
  Plus (Gt (x,y), y)
;;

[%%expect{|
Characters 91-99:
Error: This expression has type bool expr
       but an expression was expected of type int expr
       Type bool is not compatible with type int 
|}];;
[@@@part "18"];;
let rec eval = function
  | Value (Int x)  -> x
  | Value (Bool x) -> x
  | If    (c,t,e)  -> if eval c then eval t else eval e
  | Gt    (x,y)    -> eval x > eval y
  | Plus  (x,y)    -> eval x + eval y
;;

[%%expect{|
Characters 58-66:
Error: This pattern matches values of type bool value
       but a pattern was expected which matches values of type int value
       Type bool is not compatible with type int 
|}];;
[@@@part "19"];;
let rec eval : type a . a expr -> a = function
  | Value (Int x)  -> x
  | Value (Bool x) -> x
  | If    (c,t,e)  -> if eval c then eval t else eval e
  | Gt    (x,y)    -> Polymorphic_compare.(>) (eval x) (eval y)
  | Plus  (x,y)    -> eval x + eval y
;;
[%%expect ocaml {|val eval : 'a expr -> 'a = <fun>|}];;
