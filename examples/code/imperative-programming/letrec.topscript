#silent true;;
#use "topfind";;
#thread;;
#require "core";;
#require "core.top";;
#require "ppx_jane";;
#silent false;;
open Base;;
let time f =
  let open Core in
  let start = Time.now () in
  let x = f () in
  let stop = Time.now () in
  printf "Time: %F ms\n" (Time.diff stop start |> Time.Span.to_ms);
  x 
;;
[%%expect ocaml {|val time : (unit -> 'a) -> 'a = <fun>|}];;
let memoize f =
  let memo_table = Hashtbl.Poly.create () in
  (fun x ->
     Hashtbl.find_or_add memo_table x ~default:(fun () -> f x))
;;
[%%expect ocaml {|val memoize : ('a -> 'b) -> 'a -> 'b = <fun>|}];;
let fib_norec fib i =
  if i <= 1 then i
  else fib (i - 1) + fib (i - 2) ;;
[%%expect ocaml {|val fib_norec : (int -> int) -> int -> int = <fun>|}];;
[@@@part "1"];;
let memo_rec f_norec =
  let rec f = memoize (fun x -> f_norec f x) in
  f
;;
[%%expect{|
Characters 37-67:
Error: This kind of expression is not allowed as right-hand side of `let rec'
|}];;
[@@@part "2"];;
let rec x = lazy (force x + 1);;
[%%expect ocaml {|val x : int lazy_t = <lazy>|}];;
[@@@part "3"];;
force x;;
[%%expect{|Exception: Lazy.Undefined.|}];;
[@@@part "5"];;
let lazy_memo_rec f_norec x =
  let rec f = lazy (memoize (fun x -> f_norec (force f) x)) in
  (force f) x
;;
[%%expect ocaml {|val lazy_memo_rec : (('a -> 'b) -> 'a -> 'b) -> 'a -> 'b = <fun>|}];;
time (fun () -> lazy_memo_rec fib_norec 40);;
[%%expect{|Time: 0.0679492950439 ms|};
ocaml {|- : int = 102334155|}];;
